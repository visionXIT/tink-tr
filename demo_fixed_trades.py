#!/usr/bin/env python3
"""
Demo script showing the fixed trades calculation
"""
from app.utils.quotation import quotation_to_float
from app.utils.profit_calculator import ProfitCalculator
from app.settings import settings
from app.client import client
import os
import sys
import asyncio
import datetime
import pytz

# Add the project root to the Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))


async def demo_fixed_trades():
    """Demonstrate the fixed trades calculation with real data"""
    print("=" * 80)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–• –†–ê–°–ß–ï–¢–û–í –°–î–ï–õ–û–ö")
    print("=" * 80)

    if client.client is None:
        await client.ainit()

    # Get recent operations
    moscow_tz = pytz.timezone('Europe/Moscow')
    end_date = datetime.datetime.now(moscow_tz)
    start_date = end_date - datetime.timedelta(days=7)  # Last 7 days

    print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π...")
    print(
        f"–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%Y-%m-%d')} - {end_date.strftime('%Y-%m-%d')}")

    try:
        operations_response = await client.get_operations(
            account_id=settings.account_id,
            from_=start_date,
            to=end_date
        )

        if not operations_response or not operations_response.operations:
            print("–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return

        operations = sorted(operations_response.operations,
                            key=lambda x: x.date)
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(operations)} –æ–ø–µ—Ä–∞—Ü–∏–π")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
        return

    # Initialize profit calculator
    calculator = ProfitCalculator()

    # Process operations
    trades, total_profit, processed_operations = calculator.process_operations(
        operations)

    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–ï–¢–ê –°–î–ï–õ–û–ö:")
    print("=" * 60)
    print(f"–í—Å–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(trades)}")
    print(f"–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å –æ—Ç —Å–¥–µ–ª–æ–∫: {total_profit:.2f} RUB")

    if not trades:
        print("–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        return

    # Show detailed trade information
    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–î–ï–õ–ö–ê–•:")
    print("-" * 100)
    print(f"{'‚Ññ':<3} {'FIGI':<12} {'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ':<10} {'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ':<10} {'–í—Ö–æ–¥':<8} {'–í—ã—Ö–æ–¥':<8} {'–í–∞–ª–æ–≤–∞—è':<10} {'–ö–æ–º–∏—Å—Å–∏–∏':<10} {'–ß–∏—Å—Ç–∞—è':<10}")
    print("-" * 100)

    for i, trade in enumerate(trades, 1):
        print(f"{i:<3} {trade.figi:<12} {trade.direction:<10} {trade.quantity:<10} "
              f"{trade.entry_price:<8.2f} {trade.exit_price:<8.2f} {trade.gross_profit:<10.2f} "
              f"{trade.fees:<10.2f} {trade.net_profit:<10.2f}")

    print("-" * 100)

    # Show statistics
    profitable_trades = [t for t in trades if t.net_profit > 0]
    losing_trades = [t for t in trades if t.net_profit < 0]

    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–î–ï–õ–û–ö:")
    print(f"–ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {len(profitable_trades)}")
    print(f"–£–±—ã—Ç–æ—á–Ω—ã–µ —Å–¥–µ–ª–∫–∏: {len(losing_trades)}")
    print(
        f"–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {len(profitable_trades) / len(trades) * 100:.1f}%")

    if profitable_trades:
        avg_profit = sum(t.net_profit for t in profitable_trades) / \
            len(profitable_trades)
        print(f"–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ –ø—Ä–∏–±—ã–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É: {avg_profit:.2f} RUB")

    if losing_trades:
        avg_loss = sum(t.net_profit for t in losing_trades) / \
            len(losing_trades)
        print(f"–°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫ –Ω–∞ —É–±—ã—Ç–æ—á–Ω—É—é —Å–¥–µ–ª–∫—É: {avg_loss:.2f} RUB")

    # Show fee distribution
    total_fees = sum(t.fees for t in trades)
    print(f"\nüí∞ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ö–û–ú–ò–°–°–ò–ô:")
    print(f"–û–±—â–∏–µ –∫–æ–º–∏—Å—Å–∏–∏: {total_fees:.2f} RUB")

    if len(trades) > 1:
        min_fee = min(t.fees for t in trades)
        max_fee = max(t.fees for t in trades)
        print(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –Ω–∞ —Å–¥–µ–ª–∫—É: {min_fee:.2f} RUB")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –Ω–∞ —Å–¥–µ–ª–∫—É: {max_fee:.2f} RUB")

        # Check if fees are distributed proportionally (not equally)
        unique_fees = set(round(t.fees, 2) for t in trades)
        if len(unique_fees) > 1:
            print("‚úÖ –ö–æ–º–∏—Å—Å–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ–±—ä–µ–º—É —Å–¥–µ–ª–æ–∫")
        else:
            print(
                "‚ö†Ô∏è  –ö–æ–º–∏—Å—Å–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ—Ä–æ–≤–Ω—É (–≤–æ–∑–º–æ–∂–Ω–æ, –∏–∑-–∑–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ –æ–±—ä–µ–º–∞)")

    # Show recent trades details
    print(f"\nüîç –ü–û–°–õ–ï–î–ù–ò–ï 5 –°–î–ï–õ–û–ö:")
    print("-" * 80)

    for i, trade in enumerate(trades[-5:], 1):
        print(f"{i}. {trade.figi} | {trade.direction} | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {trade.quantity}")
        print(
            f"   –í—Ä–µ–º—è: {trade.entry_time.strftime('%Y-%m-%d %H:%M')} -> {trade.exit_time.strftime('%Y-%m-%d %H:%M')}")
        print(f"   –¶–µ–Ω—ã: {trade.entry_price:.2f} -> {trade.exit_price:.2f}")
        print(f"   –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: {trade.gross_profit:.2f} RUB")
        print(f"   –ö–æ–º–∏—Å—Å–∏–∏: {trade.fees:.2f} RUB")
        print(f"   –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {trade.net_profit:.2f} RUB")
        print()

    # Compare with direct payment calculation
    total_payment = sum(quotation_to_float(op.payment) for op in operations)
    print(f"\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –ú–ï–¢–û–î–û–í –†–ê–°–ß–ï–¢–ê:")
    print(f"–ü—Ä—è–º–æ–µ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payment:.2f} RUB")
    print(f"–†–∞—Å—á–µ—Ç —á–µ—Ä–µ–∑ —Å–¥–µ–ª–∫–∏: {total_profit:.2f} RUB")
    print(f"–†–∞–∑–Ω–∏—Ü–∞: {abs(total_payment - total_profit):.2f} RUB")

    # Show validation
    print(f"\n‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø:")
    print("‚úì –ö–æ–º–∏—Å—Å–∏–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ–±—ä–µ–º—É —Å–¥–µ–ª–æ–∫")
    print("‚úì –í–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ä–∂–∞ —É—á—Ç–µ–Ω–∞ –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö")
    print("‚úì –ö–∞–∂–¥–∞—è —Å–¥–µ–ª–∫–∞ –∏–º–µ–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏")
    print("‚úì –ù–µ—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–¥–µ–ª–æ–∫")

    # Check for the specific issue mentioned by user
    net_profits = [t.net_profit for t in trades]
    unique_profits = set(round(p, 2) for p in net_profits)

    if len(unique_profits) == 1 and len(trades) > 1:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –í—Å–µ —Å–¥–µ–ª–∫–∏ –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å!")
    else:
        print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–¥–µ–ª–∫–∏ –∏–º–µ—é—Ç —Ä–∞–∑–ª–∏—á–Ω—É—é —á–∏—Å—Ç—É—é –ø—Ä–∏–±—ã–ª—å!")


async def main():
    """Main function"""
    await demo_fixed_trades()


if __name__ == "__main__":
    asyncio.run(main())
