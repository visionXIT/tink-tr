#!/usr/bin/env python3
"""
Check if variation margin is properly accounted for in real data
"""
from tinkoff.invest.grpc.operations_pb2 import OperationType
from app.utils.quotation import quotation_to_float
from app.utils.profit_calculator import ProfitCalculator
from app.settings import settings
from app.client import client
import os
import sys
import asyncio
import datetime
import pytz

# Add the project root to the Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))


async def check_varmargin_in_real_data():
    """Check if variation margin is properly accounted for in real data"""
    print("=" * 80)
    print("–ü–†–û–í–ï–†–ö–ê –£–ß–ï–¢–ê –í–ê–†–ò–ê–¶–ò–û–ù–ù–û–ô –ú–ê–†–ñ–ò –í –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 80)

    if client.client is None:
        await client.ainit()

    # Get operations for specific date when we know there was variation margin
    moscow_tz = pytz.timezone('Europe/Moscow')
    # Focus on 2025-07-16 when we know there was 3391.15 rub variation margin
    start_date = moscow_tz.localize(datetime.datetime(2025, 7, 16, 0, 0, 0))
    end_date = moscow_tz.localize(datetime.datetime(2025, 7, 16, 23, 59, 59))

    print(f"–ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ {start_date.strftime('%Y-%m-%d')}...")

    try:
        operations_response = await client.get_operations(
            account_id=settings.account_id,
            from_=start_date,
            to=end_date
        )

        if not operations_response or not operations_response.operations:
            print("–ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
            return

        operations = sorted(operations_response.operations,
                            key=lambda x: x.date)
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(operations)} –æ–ø–µ—Ä–∞—Ü–∏–π")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π: {e}")
        return

    # Analyze variation margin operations
    print(f"\nüìä –ê–ù–ê–õ–ò–ó –í–ê–†–ò–ê–¶–ò–û–ù–ù–û–ô –ú–ê–†–ñ–ò:")
    print("-" * 60)

    varmargin_operations = []
    total_varmargin = 0.0

    for op in operations:
        if op.operation_type in [OperationType.OPERATION_TYPE_WRITING_OFF_VARMARGIN,
                                 OperationType.OPERATION_TYPE_ACCRUING_VARMARGIN]:
            amount = quotation_to_float(op.payment)
            total_varmargin += amount
            varmargin_operations.append((op.date, amount))

            op_type = "–ù–ê–ß–ò–°–õ–ï–ù–ò–ï" if op.operation_type == OperationType.OPERATION_TYPE_ACCRUING_VARMARGIN else "–°–ü–ò–°–ê–ù–ò–ï"
            print(
                f"{op.date.strftime('%Y-%m-%d %H:%M')} | {op_type} | {amount:>10.2f} RUB")

    print("-" * 60)
    print(f"–ò–¢–û–ì–û –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ä–∂–∞: {total_varmargin:.2f} RUB")

    # Calculate profits using different methods
    print(f"\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –ú–ï–¢–û–î–û–í –†–ê–°–ß–ï–¢–ê:")
    print("-" * 60)

    # Method 1: Direct payment sum (should include variation margin)
    total_payment = sum(quotation_to_float(op.payment) for op in operations)
    print(f"–ü—Ä—è–º–æ–µ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payment:.2f} RUB")

    # Method 2: Trade-based calculation (should include variation margin distributed across trades)
    calculator = ProfitCalculator()
    trades, total_profit, processed_operations = calculator.process_operations(
        operations)
    print(f"–†–∞—Å—á–µ—Ç —á–µ—Ä–µ–∑ —Å–¥–µ–ª–∫–∏: {total_profit:.2f} RUB")

    # Method 3: Calculate without variation margin to see the difference
    operations_without_varmargin = [
        op for op in operations
        if op.operation_type not in [OperationType.OPERATION_TYPE_WRITING_OFF_VARMARGIN,
                                     OperationType.OPERATION_TYPE_ACCRUING_VARMARGIN]
    ]

    calculator_no_varmargin = ProfitCalculator()
    trades_no_varmargin, profit_no_varmargin, _ = calculator_no_varmargin.process_operations(
        operations_without_varmargin)
    print(f"–†–∞—Å—á–µ—Ç –ë–ï–ó –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ä–∂–∏: {profit_no_varmargin:.2f} RUB")

    # Check the difference
    varmargin_impact = total_profit - profit_no_varmargin
    print(f"–í–ª–∏—è–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ä–∂–∏: {varmargin_impact:.2f} RUB")

    print(f"\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ö–û–†–†–ï–ö–¢–ù–û–°–¢–ò:")
    print("-" * 60)

    # Check if variation margin impact matches actual variation margin
    if abs(varmargin_impact - total_varmargin) < 0.01:
        print("‚úÖ –í–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ä–∂–∞ –£–ß–ò–¢–´–í–ê–ï–¢–°–Ø –ö–û–†–†–ï–ö–¢–ù–û!")
        print(f"   –†–∞—Å—á–µ—Ç–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ: {varmargin_impact:.2f} RUB")
        print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ä–∂–∞: {total_varmargin:.2f} RUB")
    else:
        print("‚ùå –í–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ä–∂–∞ –ù–ï –£–ß–ò–¢–´–í–ê–ï–¢–°–Ø –ö–û–†–†–ï–ö–¢–ù–û!")
        print(f"   –†–∞—Å—á–µ—Ç–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ: {varmargin_impact:.2f} RUB")
        print(f"   –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ä–∂–∞: {total_varmargin:.2f} RUB")
        print(f"   –†–∞–∑–Ω–∏—Ü–∞: {abs(varmargin_impact - total_varmargin):.2f} RUB")

    # Show detailed trade analysis
    if trades:
        print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–î–ï–õ–û–ö:")
        print("-" * 80)

        for i, trade in enumerate(trades[:5], 1):  # Show first 5 trades
            # Calculate margin impact for this trade
            base_net_profit = trade.gross_profit - trade.fees
            margin_impact = trade.net_profit - base_net_profit

            print(f"–°–¥–µ–ª–∫–∞ {i}:")
            print(f"  –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: {trade.gross_profit:.2f} RUB")
            print(f"  –ö–æ–º–∏—Å—Å–∏–∏: {trade.fees:.2f} RUB")
            print(f"  –ë–∞–∑–æ–≤–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {base_net_profit:.2f} RUB")
            print(f"  –í–ª–∏—è–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ä–∂–∏: {margin_impact:.2f} RUB")
            print(f"  –ò—Ç–æ–≥–æ–≤–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {trade.net_profit:.2f} RUB")
            print()

    # Show specific check for 3391.15 rub mentioned by user
    if any(abs(amount - 3391.15) < 0.01 for _, amount in varmargin_operations):
        print(f"üéØ –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –û–ø–µ—Ä–∞—Ü–∏—è –Ω–∞ 3391.15 RUB –Ω–∞–π–¥–µ–Ω–∞!")
        print(
            f"   –≠—Ç–∞ –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ä–∂–∞ {'–£–ß–¢–ï–ù–ê' if abs(varmargin_impact - total_varmargin) < 0.01 else '–ù–ï –£–ß–¢–ï–ù–ê'} –≤ —Ä–∞—Å—á–µ—Ç–µ —Å–¥–µ–ª–æ–∫.")

    print(f"\nüìà –ò–¢–û–ì–û–í–´–ô –í–´–í–û–î:")
    print("=" * 60)
    if abs(varmargin_impact - total_varmargin) < 0.01:
        print("‚úÖ –í–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ä–∂–∞ –ü–†–ê–í–ò–õ–¨–ù–û —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–∏–±—ã–ª–∏!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ä–∂–∏!")
    else:
        print("‚ùå –ù–∞–π–¥–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —É—á–µ—Ç–æ–º –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ä–∂–∏!")
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã!")


async def main():
    """Main function"""
    await check_varmargin_in_real_data()


if __name__ == "__main__":
    asyncio.run(main())
