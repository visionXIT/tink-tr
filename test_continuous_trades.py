#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ —Å–¥–µ–ª–æ–∫
"""
import pytz
import datetime
import asyncio
from app.main import calc_trades
from app.client import client
from app.settings import settings
import os
import sys
os.environ['TESTING'] = '1'

sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))


async def test_continuous_trades():
    """–¢–µ—Å—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Ä–∞—Å—á–µ—Ç–∞ —Å–¥–µ–ª–æ–∫"""
    print("=" * 80)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï–ü–†–ï–†–´–í–ù–û–ô –õ–û–ì–ò–ö–ò –†–ê–°–ß–ï–¢–ê –°–î–ï–õ–û–ö")
    print("=" * 80)

    if client.client is None:
        await client.ainit()

    # –¢–µ—Å—Ç 1: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∏ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
    print("\nüî¨ –¢–ï–°–¢ 1: –°–†–ê–í–ù–ï–ù–ò–ï –°–¢–ê–†–û–ô –ò –ù–û–í–û–ô –õ–û–ì–ò–ö–ò")
    print("-" * 60)

    try:
        moscow_tz = pytz.timezone('Europe/Moscow')
        end_date = datetime.datetime.now(moscow_tz)
        start_date = end_date - datetime.timedelta(days=30)

        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        operations_response = await client.get_operations(
            account_id=settings.account_id,
            from_=start_date,
            to=end_date
        )

        if operations_response and operations_response.operations:
            # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è)
            trades, total_profit, processed_operations = calc_trades(
                operations_response.operations)

            print(f"‚úÖ –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ (–Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è):")
            print(f"   –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(processed_operations)}")
            print(f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades)}")
            print(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit:.2f} RUB")

            # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω—ã
            trading_ops = [op for op in processed_operations if op.operation_type.name in [
                'OPERATION_TYPE_BUY', 'OPERATION_TYPE_SELL']]
            print(f"   –¢–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {len(trading_ops)}")

            # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–¥–µ–ª–æ–∫
            print(f"\nüìä –ü–µ—Ä–≤—ã–µ 5 —Å–¥–µ–ª–æ–∫:")
            for i, trade in enumerate(trades[:5]):
                print(f"   {i+1}. {trade['type']} {trade['quantity']} –ª–æ—Ç. "
                      f"–ü—Ä–∏–±—ã–ª—å: {trade['result']:.2f} RUB "
                      f"({trade['timeStart']} - {trade['timeEnd']})")

            # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
            if len(trades) > 5:
                print(f"\nüìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫:")
                for i, trade in enumerate(trades[-5:]):
                    print(f"   {len(trades)-4+i}. {trade['type']} {trade['quantity']} –ª–æ—Ç. "
                          f"–ü—Ä–∏–±—ã–ª—å: {trade['result']:.2f} RUB "
                          f"({trade['timeStart']} - {trade['timeEnd']})")

            # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö –∏ —É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
            profitable_trades = [t for t in trades if t['result'] > 0]
            losing_trades = [t for t in trades if t['result'] < 0]

            print(f"\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(profitable_trades)}")
            print(f"   –£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(losing_trades)}")
            print(
                f"   –ë–µ–∑—É–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(trades) - len(profitable_trades) - len(losing_trades)}")

            if profitable_trades:
                avg_profit = sum(t['result']
                                 for t in profitable_trades) / len(profitable_trades)
                print(f"   –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å: {avg_profit:.2f} RUB")

            if losing_trades:
                avg_loss = sum(t['result']
                               for t in losing_trades) / len(losing_trades)
                print(f"   –°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫: {avg_loss:.2f} RUB")

        else:
            print("‚ùå –ù–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        import traceback
        traceback.print_exc()

    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏
    print("\nüîó –¢–ï–°–¢ 2: –ü–†–û–í–ï–†–ö–ê –ù–ï–ü–†–ï–†–´–í–ù–û–°–¢–ò")
    print("-" * 60)

    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Å–¥–µ–ª–∫–∏ –ø–æ–∫—Ä—ã–≤–∞—é—Ç –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        total_operations = len([op for op in processed_operations if op.operation_type.name in [
                               'OPERATION_TYPE_BUY', 'OPERATION_TYPE_SELL']])

        # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–¥–µ–ª–∫–∞—Ö
        operations_in_trades = 0
        for trade in trades:
            # –ö–∞–∂–¥–∞—è —Å–¥–µ–ª–∫–∞ –∫–∞–∫ –º–∏–Ω–∏–º—É–º —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 2 –æ–ø–µ—Ä–∞—Ü–∏–π (–ø–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞)
            operations_in_trades += 2  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç

        print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:")
        print(f"   –í—Å–µ–≥–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {total_operations}")
        print(f"   –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∞–º–∏: {operations_in_trades}")

        # –ü—Ä–æ–≤–µ—Ä–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if len(trades) > 1:
            time_gaps = []
            for i in range(1, len(trades)):
                prev_end = datetime.datetime.strptime(
                    trades[i-1]['timeEnd'], '%Y-%m-%d %H:%M')
                curr_start = datetime.datetime.strptime(
                    trades[i]['timeStart'], '%Y-%m-%d %H:%M')
                gap = (curr_start - prev_end).total_seconds()
                time_gaps.append(gap)

            avg_gap = sum(time_gaps) / len(time_gaps) if time_gaps else 0
            print(
                f"   –°—Ä–µ–¥–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏: {avg_gap/60:.1f} –º–∏–Ω—É—Ç")

            # –ù–∞–π–¥–µ–º —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Ä–∞–∑—Ä—ã–≤—ã
            if time_gaps:
                max_gap = max(time_gaps)
                print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä—ã–≤: {max_gap/3600:.1f} —á–∞—Å–æ–≤")

        print(f"‚úÖ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å: –°–¥–µ–ª–∫–∏ —Å–ª–µ–¥—É—é—Ç –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–æ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç–∏: {e}")

    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
    print("\nüí∞ –¢–ï–°–¢ 3: –ü–†–û–í–ï–†–ö–ê –†–ê–°–ß–ï–¢–ê –ü–†–ò–ë–´–õ–ò")
    print("-" * 60)

    try:
        if trades:
            # –ü–æ–¥—Å—á–∏—Ç–∞–µ–º –ø—Ä–∏–±—ã–ª—å —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            sum_by_trades = sum(t['result'] for t in trades)

            print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏:")
            print(f"   –°—É–º–º–∞ –ø—Ä–∏–±—ã–ª–∏ –ø–æ —Å–¥–µ–ª–∫–∞–º: {sum_by_trades:.2f} RUB")
            print(f"   –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å (calc_trades): {total_profit:.2f} RUB")
            print(f"   –†–∞–∑–Ω–æ—Å—Ç—å: {abs(sum_by_trades - total_profit):.2f} RUB")

            if abs(sum_by_trades - total_profit) < 0.01:
                print(f"   ‚úÖ –†–∞—Å—á–µ—Ç—ã –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã")
            else:
                print(f"   ‚ö†Ô∏è  –ï—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö")

            # –ü—Ä–æ–≤–µ—Ä–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            gross_profit = sum(t.get('gross_profit', 0) for t in trades)
            fees = sum(t.get('fees', 0) for t in trades)

            print(f"   –í–∞–ª–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å: {gross_profit:.2f} RUB")
            print(f"   –ö–æ–º–∏—Å—Å–∏–∏: {fees:.2f} RUB")
            print(f"   –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {gross_profit - fees:.2f} RUB")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∏–±—ã–ª–∏: {e}")

    print("\nüìã –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    print("=" * 60)
    print("‚úÖ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å–¥–µ–ª–æ–∫:")
    print("   - –ö–∞–∂–¥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Å–¥–µ–ª–∫–µ")
    print("   - –°–¥–µ–ª–∫–∏ —Å–ª–µ–¥—É—é—Ç –¥—Ä—É–≥ –∑–∞ –¥—Ä—É–≥–æ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
    print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ–±—â–∞—è –ø—Ä–∏–±—ã–ª—å")
    print("   - –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
    print()
    print("üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏:")
    print("   - –ù–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
    print("   - –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏")
    print("   - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏—á–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤")
    print("   - –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫")


if __name__ == "__main__":
    asyncio.run(test_continuous_trades())
